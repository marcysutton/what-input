/**
 * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).
 * @version v4.0.6
 * @link https://github.com/ten1seven/what-input
 * @license MIT
 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("whatInput",[],t):"object"==typeof exports?exports.whatInput=t():e.whatInput=t()}(this,function(){return function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t){e.exports=function(e){var t=e,n=e.document,o=n.documentElement,i="initial",r=null,u=["input","select","textarea"],d=[16,17,18,91,93],a={keyup:"keyboard",mousedown:"mouse",mousemove:"mouse",MSPointerDown:"pointer",MSPointerMove:"pointer",pointerdown:"pointer",pointermove:"pointer",touchstart:"touch"},p=[],s=!1,c={2:"touch",3:"touch",4:"mouse"},f=null,m=function(){a[x()]="mouse",v(),l()},v=function(){t.PointerEvent?(o.addEventListener("pointerdown",h),o.addEventListener("pointermove",w)):t.MSPointerEvent?(o.addEventListener("MSPointerDown",h),o.addEventListener("MSPointerMove",w)):(o.addEventListener("mousedown",h),o.addEventListener("mousemove",w),"ontouchstart"in t&&o.addEventListener("touchstart",y)),o.addEventListener(x(),w),o.addEventListener("keydown",h),o.addEventListener("keyup",h)},h=function(e){if(!s){var t=e.which,o=a[e.type];if("pointer"===o&&(o=E(e)),i!==o||r!==o){var p=n.activeElement,c=!(!p||!p.nodeName||u.indexOf(p.nodeName.toLowerCase())!==-1);("touch"===o||"mouse"===o&&d.indexOf(t)===-1||"keyboard"===o&&c)&&(i=r=o,l())}}},l=function(){o.setAttribute("data-whatinput",i),o.setAttribute("data-whatintent",i),p.indexOf(i)===-1&&(p.push(i),o.className+=" whatinput-types-"+i)},w=function(e){if(!s){var t=a[e.type];"pointer"===t&&(t=E(e)),r!==t&&(r=t,o.setAttribute("data-whatintent",r))}},y=function(e){t.clearTimeout(f),h(e),s=!0,f=t.setTimeout(function(){s=!1},200)},E=function(e){return"number"==typeof e.pointerType?c[e.pointerType]:"pen"===e.pointerType?"touch":e.pointerType},x=function(){return"onwheel"in n.createElement("div")?"wheel":void 0!==n.onmousewheel?"mousewheel":"DOMMouseScroll"};return"addEventListener"in t&&Array.prototype.indexOf&&m(),{ask:function(e){return"loose"===e?r:i},types:function(){return p}}}("object"==typeof window?window:this)}])});